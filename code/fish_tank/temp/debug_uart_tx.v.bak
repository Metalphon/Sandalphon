`timescale 1ns / 1ps
//****************************************VSCODE PLUG-IN**********************************//
//----------------------------------------------------------------------------------------
// IDE :                   VSCODE     
// VSCODE plug-in version: Verilog-Hdl-Format-2.8.20240817
// VSCODE plug-in author : Jiang Percy
//----------------------------------------------------------------------------------------
//****************************************Copyright (c)***********************************//
// Copyright(C)            vscode
// All rights reserved     
// File name:              
// Last modified Date:     2024/10/28 17:30:27
// Last Version:           V1.0
// Descriptions:           
//----------------------------------------------------------------------------------------
// Created by:             ff
// Created date:           2024/10/28 17:30:27
// mail      :             fyzhang1123@163.com
// Version:                V1.0
// TEXT NAME:              debug_uart_tx.v
// PATH:                   E:\post\fpga_compi\example\gowin\ch34_uart_ddr3_tft_hdmi\src\debug_uart_tx.v
// Descriptions:           
//                         
//----------------------------------------------------------------------------------------
//****************************************************************************************//

//****************************************数据处理说明**********************************//
// MAX30102传感器数据处理与计算方法:
// 1. 传感器采集红光(Red)和红外光(IR)数据，包括交流分量(AC)和直流分量(DC)
// 2. 计算比值R: R = (AC_Red/DC_Red)/(AC_IR/DC_IR)
// 3. 计算血氧饱和度(SpO₂): SpO₂ = 110 - 25 × R
// 4. 计算心率: HR = 60/T，其中T是相邻脉搏波的时间间隔(秒)
//
// 示例计算:
// - 若AC_Red=0.5, DC_Red=1.2, AC_IR=0.8, DC_IR=2.0, T=0.85秒
// - 则R = (0.5/1.2)/(0.8/2.0) = 0.4167/0.4 = 1.042
// - SpO₂ = 110 - 25×1.042 = 110 - 26.05 = 83.95%
// - HR = 60/0.85 = 70.59 ≈ 71 bpm
//
// 本模块处理的数据:
// - datain[35:18]: IR值(红外光)
// - datain[17:0]: R值(红光)
// - 这些值需要进一步处理才能得到最终的SpO₂和心率
//********************************************************************************//

module debug_uart_tx(
    input                               clk                        ,
    input                               rst_n                      ,
    input                            [47:0] datain  , 
    input                               data_de  , 
    output                              uart_tx
);

    parameter CLK_FRE = 33; 
	parameter BAUD_RATE = 1000000; 

    reg [7:0] tx_data;
    reg tx_data_valid;
    wire tx_data_ready;
    reg tx_data_ready_r;
    reg [5:0] tx_cnt;
    wire pose;
    
    // 添加1.5秒计数器 (假设时钟频率为50MHz)
    reg [31:0] sec_counter;
    reg data_enable;
    
    // 数据平滑处理相关寄存器
    reg [17:0] ir_value_smooth;      // 平滑后的IR值
    reg [17:0] r_value_smooth;       // 平滑后的R值
    reg [7:0] spo2_smooth;           // 平滑后的血氧值
    reg [7:0] heart_rate_smooth;     // 平滑后的心率值
    reg [7:0] spo2_last;             // 上一次的血氧值
    reg [7:0] heart_rate_last;       // 上一次的心率值
    reg [17:0] ir_value_last;        // 上一次的IR值
    reg [17:0] r_value_last;         // 上一次的R值
    
    // AC和DC值的寄存器
    reg [17:0] ac_red, dc_red;
    reg [17:0] ac_ir, dc_ir;
    reg [31:0] r_value_calc;         // R值计算结果（放大1000倍）
    
    // 峰值检测相关寄存器
    reg [17:0] ir_max, ir_min;
    reg [17:0] red_max, red_min;
    reg [3:0] sample_count;
    reg [31:0] pulse_timer;
    reg [31:0] last_pulse_time;
    reg pulse_detected;
    
    // ASCII转换寄存器
    reg [7:0] spo2_ascii[2:0];       // 血氧ASCII码
    reg [7:0] hr_ascii[2:0];         // 心率ASCII码
    
    // 1.5秒计数器逻辑
    always@(posedge clk or negedge rst_n) begin
        if(!rst_n) begin
            sec_counter <= 32'd0;
            data_enable <= 1'b1;
        end
        else begin
            if(sec_counter >= 32'd75_000_000) begin
                sec_counter <= 32'd0;
                data_enable <= 1'b1;
            end
            else begin
                sec_counter <= sec_counter + 1'b1;
                if(tx_cnt == 6'd0 && data_de && data_enable) begin
                    data_enable <= 1'b0;
                end
            end
        end
    end

    // 数据平滑处理逻辑
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            ir_value_smooth <= 18'd0;
            r_value_smooth <= 18'd0;
            spo2_smooth <= 8'd0;
            heart_rate_smooth <= 8'd0;
            ir_value_last <= 18'd0;
            r_value_last <= 18'd0;
            spo2_last <= 8'd0;
            heart_rate_last <= 8'd0;
            ir_max <= 18'd0;
            ir_min <= 18'hFFFF;
            red_max <= 18'd0;
            red_min <= 18'hFFFF;
            sample_count <= 4'd0;
            pulse_timer <= 32'd0;
            last_pulse_time <= 32'd0;
            pulse_detected <= 1'b0;
        end
        else if (data_de) begin
            // IR值平滑处理（限制变化范围为上次值的±10%）
            if (datain[35:18] > ir_value_last + (ir_value_last >> 3))
                ir_value_smooth <= ir_value_last + (ir_value_last >> 3);
            else if (datain[35:18] < ir_value_last - (ir_value_last >> 3))
                ir_value_smooth <= ir_value_last - (ir_value_last >> 3);
            else
                ir_value_smooth <= datain[35:18];
            
            // R值平滑处理（限制变化范围为上次值的±10%）
            if (datain[17:0] > r_value_last + (r_value_last >> 3))
                r_value_smooth <= r_value_last + (r_value_last >> 3);
            else if (datain[17:0] < r_value_last - (r_value_last >> 3))
                r_value_smooth <= r_value_last - (r_value_last >> 3);
            else
                r_value_smooth <= datain[17:0];
            
            // 更新最大最小值用于AC计算
            if (ir_value_smooth > ir_max) ir_max <= ir_value_smooth;
            if (ir_value_smooth < ir_min) ir_min <= ir_value_smooth;
            if (r_value_smooth > red_max) red_max <= r_value_smooth;
            if (r_value_smooth < red_min) red_min <= r_value_smooth;
            
            sample_count <= sample_count + 1;
            
            // 每8个样本计算一次
            if (sample_count == 4'd8) begin
                // 计算AC和DC值
                ac_ir <= ir_max - ir_min;
                dc_ir <= (ir_max + ir_min) >> 1;
                ac_red <= red_max - red_min;
                dc_red <= (red_max + red_min) >> 1;
                
                // 重置最大最小值
                ir_max <= 18'd0;
                ir_min <= 18'hFFFF;
                red_max <= 18'd0;
                red_min <= 18'hFFFF;
                sample_count <= 4'd0;
                
                // 计算R值和血氧饱和度
                if (dc_ir != 0 && dc_red != 0) begin
                    r_value_calc <= ((ac_red * dc_ir * 1000) / (dc_red * ac_ir));
                    // 计算新的血氧值
                    reg [7:0] new_spo2;
                    new_spo2 = (r_value_calc > 1000) ? 
                              8'd110 - ((r_value_calc * 25) / 1000) : 
                              8'd99;
                    
                    // 限制血氧值变化范围（±1%）
                    if (new_spo2 > spo2_last + 1)
                        spo2_smooth <= spo2_last + 1;
                    else if (new_spo2 < spo2_last - 1)
                        spo2_smooth <= spo2_last - 1;
                    else
                        spo2_smooth <= new_spo2;
                end
                
                // 心率检测和平滑处理
                if (ir_value_smooth > ir_value_last && !pulse_detected) begin
                    pulse_detected <= 1'b1;
                    if (last_pulse_time != 0) begin
                        // 计算新的心率值
                        reg [7:0] new_heart_rate;
                        new_heart_rate = (32'd60 * 32'd50_000_000) / (pulse_timer - last_pulse_time);
                        
                        // 限制心率变化范围（±3 BPM）
                        if (new_heart_rate > heart_rate_last + 3)
                            heart_rate_smooth <= heart_rate_last + 3;
                        else if (new_heart_rate < heart_rate_last - 3)
                            heart_rate_smooth <= heart_rate_last - 3;
                        else
                            heart_rate_smooth <= new_heart_rate;
                    end
                    last_pulse_time <= pulse_timer;
                end
                else if (ir_value_smooth < ir_value_last) begin
                    pulse_detected <= 1'b0;
                end
            end
            
            // 更新上一次的值
            ir_value_last <= ir_value_smooth;
            r_value_last <= r_value_smooth;
            spo2_last <= spo2_smooth;
            heart_rate_last <= heart_rate_smooth;
            pulse_timer <= pulse_timer + 1;
            
            // 转换血氧和心率为ASCII
            spo2_ascii[2] <= 8'h30 + (spo2_smooth / 100);      // 百位
            spo2_ascii[1] <= 8'h30 + ((spo2_smooth / 10) % 10); // 十位
            spo2_ascii[0] <= 8'h30 + (spo2_smooth % 10);        // 个位
            
            hr_ascii[2] <= 8'h30 + (heart_rate_smooth / 100);      // 百位
            hr_ascii[1] <= 8'h30 + ((heart_rate_smooth / 10) % 10); // 十位
            hr_ascii[0] <= 8'h30 + (heart_rate_smooth % 10);        // 个位
        end
    end

    // UART发送状态机
    always@(posedge clk or negedge rst_n) begin
        if(!rst_n) begin
            tx_cnt <= 6'd0;
            tx_data <= 8'd0;
            tx_data_valid <= 1'd0;
        end
        else begin
            case (tx_cnt)
                6'd0: begin
                    if(data_de && data_enable && tx_data_ready) begin
                        // 发送血氧标识 "S:"
                        tx_data <= 8'h53; // 'S'
                        tx_data_valid <= 1'd1;
                        tx_cnt <= 6'd1;
                    end
                end
                6'd1: begin
                    tx_data_valid <= 1'd0;
                    if(pose) begin
                        tx_data <= 8'h3A; // ':'
                        tx_data_valid <= 1'd1;
                        tx_cnt <= 6'd2;
                    end
                end
                6'd2: begin
                    tx_data_valid <= 1'd0;
                    if(pose) begin
                        tx_data <= spo2_ascii[2]; // 血氧百位
                        tx_data_valid <= 1'd1;
                        tx_cnt <= 6'd3;
                    end
                end
                6'd3: begin
                    tx_data_valid <= 1'd0;
                    if(pose) begin
                        tx_data <= spo2_ascii[1]; // 血氧十位
                        tx_data_valid <= 1'd1;
                        tx_cnt <= 6'd4;
                    end
                end
                6'd4: begin
                    tx_data_valid <= 1'd0;
                    if(pose) begin
                        tx_data <= spo2_ascii[0]; // 血氧个位
                        tx_data_valid <= 1'd1;
                        tx_cnt <= 6'd5;
                    end
                end
                6'd5: begin
                    tx_data_valid <= 1'd0;
                    if(pose) begin
                        tx_data <= 8'h2C; // ','
                        tx_data_valid <= 1'd1;
                        tx_cnt <= 6'd6;
                    end
                end
                6'd6: begin
                    tx_data_valid <= 1'd0;
                    if(pose) begin
                        tx_data <= 8'h48; // 'H'
                        tx_data_valid <= 1'd1;
                        tx_cnt <= 6'd7;
                    end
                end
                6'd7: begin
                    tx_data_valid <= 1'd0;
                    if(pose) begin
                        tx_data <= 8'h3A; // ':'
                        tx_data_valid <= 1'd1;
                        tx_cnt <= 6'd8;
                    end
                end
                6'd8: begin
                    tx_data_valid <= 1'd0;
                    if(pose) begin
                        tx_data <= hr_ascii[2]; // 心率百位
                        tx_data_valid <= 1'd1;
                        tx_cnt <= 6'd9;
                    end
                end
                6'd9: begin
                    tx_data_valid <= 1'd0;
                    if(pose) begin
                        tx_data <= hr_ascii[1]; // 心率十位
                        tx_data_valid <= 1'd1;
                        tx_cnt <= 6'd10;
                    end
                end
                6'd10: begin
                    tx_data_valid <= 1'd0;
                    if(pose) begin
                        tx_data <= hr_ascii[0]; // 心率个位
                        tx_data_valid <= 1'd1;
                        tx_cnt <= 6'd11;
                    end
                end
                6'd11: begin
                    tx_data_valid <= 1'd0;
                    if(pose) begin
                        tx_data <= 8'h0A; // '\n'
                        tx_data_valid <= 1'd1;
                        tx_cnt <= 6'd12;
                    end
                end
                6'd12: begin
                    tx_data_valid <= 1'd0;
                    if(pose) begin
                        tx_data <= 8'h0D; // '\r'
                        tx_data_valid <= 1'd1;
                        tx_cnt <= 6'd13;
                    end
                end
                6'd13: begin
                    tx_data_valid <= 1'd0;
                    if(pose) begin
                        tx_cnt <= 6'd0;
                    end
                end
                default: tx_cnt <= 6'd0;
            endcase
        end
    end

    always@(posedge clk or negedge rst_n) begin
        if(!rst_n) begin
            tx_data_ready_r <= 1'd0;
        end
        else begin
            tx_data_ready_r <= tx_data_ready;
        end
    end

    assign pose = tx_data_ready && (~tx_data_ready_r);

    // UART发送模块实例化
    uart_tx#(
        .CLK_FRE        (CLK_FRE        ),
        .BAUD_RATE      (BAUD_RATE      )
    )
    u_uart_tx(
        .clk            (clk            ),
        .rst_n          (rst_n          ),
        .tx_data        (tx_data        ),
        .tx_data_valid  (tx_data_valid  ),
        .tx_data_ready  (tx_data_ready  ),
        .tx_pin         (uart_tx        )
    );

endmodule